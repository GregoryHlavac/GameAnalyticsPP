// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtocolBuffers {
namespace GameAnalytics {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class Event;

// ===================================================================

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required string build = 3;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 3;
  inline const ::std::string& build() const;
  inline void set_build(const ::std::string& value);
  inline void set_build(const char* value);
  inline void set_build(const char* value, size_t size);
  inline ::std::string* mutable_build();
  inline ::std::string* release_build();
  inline void set_allocated_build(::std::string* build);

  // optional string event_id = 4;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  inline const ::std::string& event_id() const;
  inline void set_event_id(const ::std::string& value);
  inline void set_event_id(const char* value);
  inline void set_event_id(const char* value, size_t size);
  inline ::std::string* mutable_event_id();
  inline ::std::string* release_event_id();
  inline void set_allocated_event_id(::std::string* event_id);

  // optional string area = 5;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 5;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const char* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // optional float x = 6;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 6;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 7;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 8;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 8;
  inline float z() const;
  inline void set_z(float value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Event)
  // @@protoc_insertion_point(class_scope:ProtocolBuffers.GameAnalytics.Event)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_build();
  inline void clear_has_build();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  ::std::string* session_id_;
  ::std::string* build_;
  ::std::string* event_id_;
  ::std::string* area_;
  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event

// required string user_id = 1;
inline bool Event::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& Event::user_id() const {
  return *user_id_;
}
inline void Event::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Event::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Event::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* Event::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string session_id = 2;
inline bool Event::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& Event::session_id() const {
  return *session_id_;
}
inline void Event::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void Event::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void Event::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* Event::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string build = 3;
inline bool Event::has_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_build() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_build() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_build() {
  if (build_ != &::google::protobuf::internal::kEmptyString) {
    build_->clear();
  }
  clear_has_build();
}
inline const ::std::string& Event::build() const {
  return *build_;
}
inline void Event::set_build(const ::std::string& value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::kEmptyString) {
    build_ = new ::std::string;
  }
  build_->assign(value);
}
inline void Event::set_build(const char* value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::kEmptyString) {
    build_ = new ::std::string;
  }
  build_->assign(value);
}
inline void Event::set_build(const char* value, size_t size) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::kEmptyString) {
    build_ = new ::std::string;
  }
  build_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_build() {
  set_has_build();
  if (build_ == &::google::protobuf::internal::kEmptyString) {
    build_ = new ::std::string;
  }
  return build_;
}
inline ::std::string* Event::release_build() {
  clear_has_build();
  if (build_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = build_;
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_build(::std::string* build) {
  if (build_ != &::google::protobuf::internal::kEmptyString) {
    delete build_;
  }
  if (build) {
    set_has_build();
    build_ = build;
  } else {
    clear_has_build();
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_id = 4;
inline bool Event::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_event_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_event_id() {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    event_id_->clear();
  }
  clear_has_event_id();
}
inline const ::std::string& Event::event_id() const {
  return *event_id_;
}
inline void Event::set_event_id(const ::std::string& value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void Event::set_event_id(const char* value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void Event::set_event_id(const char* value, size_t size) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_event_id() {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  return event_id_;
}
inline ::std::string* Event::release_event_id() {
  clear_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_id_;
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_event_id(::std::string* event_id) {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    delete event_id_;
  }
  if (event_id) {
    set_has_event_id();
    event_id_ = event_id;
  } else {
    clear_has_event_id();
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string area = 5;
inline bool Event::has_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_area() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& Event::area() const {
  return *area_;
}
inline void Event::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void Event::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void Event::set_area(const char* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  return area_;
}
inline ::std::string* Event::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float x = 6;
inline bool Event::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Event::x() const {
  return x_;
}
inline void Event::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 7;
inline bool Event::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Event::y() const {
  return y_;
}
inline void Event::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 8;
inline bool Event::has_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Event::z() const {
  return z_;
}
inline void Event::set_z(float value) {
  set_has_z();
  z_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameAnalytics
}  // namespace ProtocolBuffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
